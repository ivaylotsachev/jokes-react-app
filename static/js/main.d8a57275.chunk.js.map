{"version":3,"sources":["components/Joke.js","components/JokeList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","votes","this","props","react_default","a","createElement","className","onClick","upVote","style","borderColor","getColor","downVote","text","getEmoji","Component","JokeList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleVote","id","delta","setState","oldState","jokes","map","j","objectSpread","localStorage","setItem","JSON","stringify","state","handleClick","isLoading","getJokes","parse","getItem","seenJokes","Set","length","numJokesToGet","axios","get","headers","Accept","response","newJoke","data","joke","has","push","uuid","st","concat","toConsumableArray","_this2","newJokes","oldJokes","e","console","error","_this3","sort","b","src","alt","src_components_Joke","key","defaultProps","App","src_components_JokeList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8a57275.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Joke.css\";\r\n\r\nclass Joke extends Component {\r\n  getColor() {\r\n    let { votes } = this.props;\r\n\r\n    if (votes >= 15) return \"#4acf50\";\r\n    else if (votes >= 12) return \"#8bc34a\";\r\n    else if (votes >= 9) return \"#cddc39\";\r\n    else if (votes >= 6) return \"#ffeb3b\";\r\n    else if (votes >= 3) return \"#ffc107\";\r\n    else if (votes >= 0) return \"#ff9800\";\r\n    else return \"#f44336\";\r\n  }\r\n\r\n  getEmoji() {\r\n    let { votes } = this.props;\r\n\r\n    if (votes >= 15) return \"em em-rolling_on_the_floor_laughing\";\r\n    else if (votes >= 12) return \"em em-laughing\";\r\n    else if (votes >= 9) return \"em em-smiley\";\r\n    else if (votes >= 6) return \"em em-slightly_smiling_face\";\r\n    else if (votes >= 3) return \"em em-neutral_face\";\r\n    else if (votes >= 0) return \"em em-confused\";\r\n    else return \"em em-angry\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Joke\">\r\n        <div className=\"Joke_buttons\">\r\n          <i className=\"fas fa-arrow-up\" onClick={this.props.upVote} />\r\n          <span\r\n            className=\"Joke_votes\"\r\n            style={{\r\n              borderColor: this.getColor()\r\n            }}\r\n          >\r\n            {this.props.votes}\r\n          </span>\r\n          <i className=\"fas fa-arrow-down\" onClick={this.props.downVote} />\r\n        </div>\r\n        <div className=\"Joke_text\">{this.props.text}</div>\r\n        <div className=\"Joke_smiley\">\r\n          <i className={this.getEmoji()} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Joke;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Joke from \"./Joke\";\r\nimport uuid from \"uuid\";\r\nimport \"./JokeList.css\";\r\n\r\nclass JokeList extends Component {\r\n  static defaultProps = {\r\n    numJokesToGet: 10\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      jokes: JSON.parse(localStorage.getItem(\"jokes\")) || [],\r\n      isLoading: false\r\n    };\r\n\r\n    this.seenJokes = new Set(this.state.jokes.map(j => j.text));\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.state.jokes.length === 0) this.getJokes();\r\n  }\r\n\r\n  async getJokes() {\r\n    this.setState({ isLoading: true });\r\n\r\n    try {\r\n      let jokes = [];\r\n\r\n      while (jokes.length < this.props.numJokesToGet) {\r\n        let response = await axios.get(\"https://icanhazdadjoke.com/\", {\r\n          headers: { Accept: \"application/json\" }\r\n        });\r\n\r\n        let newJoke = response.data.joke;\r\n\r\n        if (!this.seenJokes.has(newJoke)) {\r\n          jokes.push({ id: uuid(), joke: newJoke, votes: 0 });\r\n        }\r\n      }\r\n\r\n      this.setState(\r\n        st => ({\r\n          isLoading: false,\r\n          jokes: [...st.jokes, ...jokes]\r\n        }),\r\n        () => localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\r\n      );\r\n    } catch (err) {\r\n      this.setState({ isLoading: false });\r\n    }\r\n  }\r\n\r\n  handleVote = (id, delta) => {\r\n    this.setState(\r\n      oldState => ({\r\n        jokes: oldState.jokes.map(j =>\r\n          j.id === id ? { ...j, votes: j.votes + delta } : j\r\n        )\r\n      }),\r\n      () => localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\r\n    );\r\n  };\r\n\r\n  handleClick = () => {\r\n    this.setState({ isLoading: true }, () => this.getJokes());\r\n  };\r\n\r\n  compare(newJokes, oldJokes) {\r\n    newJokes = newJokes.map(e => e.joke);\r\n    oldJokes = oldJokes.map(e => e.joke);\r\n    console.error(\"new jokes\", newJokes);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.isLoading) {\r\n      return (\r\n        <div className=\"spinner\">\r\n          <i className=\"far fa-8x fa-laugh fa-spin\" />\r\n          <h1>Loading...</h1>\r\n        </div>\r\n      );\r\n    } else {\r\n      let jokes = this.state.jokes.sort((a, b) => b.votes - a.votes);\r\n\r\n      return (\r\n        <div className=\"JokeList\">\r\n          <div className=\"Jokelist_sidebar\">\r\n            <h1 className=\"Jokelist_title\">\r\n              <span>Funny</span> Jokes\r\n            </h1>\r\n            <img\r\n              src=\"https://cdn0.iconfinder.com/data/icons/classic-icons/512/093.png\"\r\n              alt=\"app icon here\"\r\n            />\r\n            <button className=\"JokeList_getmore\" onClick={this.handleClick}>\r\n              Fetch Jokes\r\n            </button>\r\n          </div>\r\n          <div className=\"JokeList_jokes\">\r\n            {jokes.map(j => (\r\n              <Joke\r\n                key={j.id}\r\n                text={j.joke}\r\n                votes={j.votes}\r\n                upVote={() => this.handleVote(j.id, 1)}\r\n                downVote={() => this.handleVote(j.id, -1)}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default JokeList;\r\n","import React from \"react\";\nimport JokeList from \"./components/JokeList\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JokeList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}